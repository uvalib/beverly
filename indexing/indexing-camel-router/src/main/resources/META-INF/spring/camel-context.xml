<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:ctx="http://www.springframework.org/schema/context"
  xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
  http://www.springframework.org/schema/osgi-compendium http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd">
  
  <camelContext id="indexer" xmlns="http://camel.apache.org/schema/spring"
    streamCache="true"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:fedora-model="info:fedora/fedora-system:def/model#"
    xmlns:uva-lib="http://fedora.lib.virginia.edu/relationships#">   

    <route>
      <description>Entry point for all indexing workflows</description>
      <from uri="nmr:service:indexing:index"/>
      <choice>
        <when>
          <description>Is this a purgeObject operation?</description>
          <simple>${header.methodName} == 'purgeObject'</simple>
          <!-- fire a Solr delete operation at the index, in case it was an indexable object -->
          <to uri="freemarker:freemarker/solr/delete.vm"/>
          <to uri="nmr:endpoint:indexing:solr:update"/>
          <!-- but also assume that it might have been an indexer object -->
          <!-- first gather the affected objects -->
          <to uri="freemarker:freemarker/sparql/getindexedobjects.vm"/>
          <inOut uri="nmr:service:repositories:resource-index"/>
          <!-- remove the appropriate no-longer-relevant RELS-INT triples -->
          <split parallelProcessing="true">
            <xpath>/rdf:RDF/rdf:Description</xpath>
            <removeHeader headerName="methodName"/>
            <!-- remove the appropriate no-longer-relevant RELS-INT triple -->
            <setHeader headerName="subject">
              <!-- peel out the indexable subject -->
              <xpath resultType="java.lang.String">/rdf:Description/@rdf:about</xpath>
            </setHeader>
            <to uri="freemarker:freemarker/atom/removetriples.vm"/>
            <removeHeader headerName="subject"/>
            <to uri="nmr:service:repositories:api-m"/>
            <!-- don't need to explicitly reindex the object because we just
              called purgeRelationship on it, which will trigger reindexing-->
          </split>
        </when>
        <otherwise>
          <description>This object was not purged, so we can retrieve info about it from its
          repo</description>
          
          <!-- is this a content object or an indexer object? -->
         
          <to uri="freemarker:freemarker/sparql/getcontentmodels.vm"/>    
          <inOut uri="nmr:service:repositories:resource-index"/>
          <log message="Retrieved content model information: in.body = ${in.body} and out.body = ${out.body}"/>
          <choice>
            <when>
              <description>Does this object have the indexable CM?</description>
              <xpath>/rdf:RDF/rdf:Description/fedora-model:hasModel/@rdf:resource = 'info:fedora/indexable:cm'</xpath>
              <choice>
                <when>
                  <description>Is this a purgeDatastream operation?</description>
                  <simple>${header.methodName} == 'purgeDatastream'</simple>
                  <!-- first remove any dependent RELS-INT triples -->
                  <to uri="freemarker:freemarker/sparql/getindexedpurgeddatastreams.vm"/>
                  <!-- now reindex this object -->
                  <to uri="nmr:service:indexing:indexIndexableObject"/>
                </when>
                <otherwise>
                  <to uri="nmr:service:indexing:indexIndexableObject"/>
                </otherwise>
              </choice>
            </when>
            <when>
              <description>Does this object have the indexer CM?</description>
              <xpath>/rdf:RDF/rdf:Description/fedora-model:hasModel/@rdf:resource = 'info:fedora/indexer:cm'</xpath>
              <!-- Ordinary form to index on an indexer object -->
              <to uri="freemarker:freemarker/sparql/getindexeddatastreams.vm"/>
              <inOut uri="nmr:service:repositories:resource-index"/>
              <split parallelProcessing="true">
                <xpath>/rdf:RDF/rdf:Description</xpath>
                <setHeader headerName="pid">
                  <!-- peel out the pid itself -->
                  <xpath resultType="java.lang.String">substring-before(substring-after(/rdf:Description/@rdf:about,'/'),'/')</xpath>
                </setHeader>
                <removeHeader headerName="methodName"/>
                <to uri="nmr:service:indexing:index"/>
              </split>
            </when>
          </choice>
        </otherwise>
      </choice>
    </route>

    <route>
      <description>Index a single object</description>
      <from uri="nmr:service:indexing:indexIndexableObject"/>
      <setHeader headerName="CamelHttpUri">
        <simple>${headers.repositoryURL}/objects/${headers.pid}/methods/indexable:sdef/getIndexingMetadata</simple>
      </setHeader>
      <setHeader headerName="CamelHttpMethod">
        <constant>GET</constant>
      </setHeader>
      <to uri="http://fedora/getIndexingMetadata"/>
      <removeHeader headerName="CamelHttpUri"/>
      <removeHeader headerName="CamelHttpMethod"/>
      <to uri="http://mbusdev.lib.virginia.edu:8080/solr/update"/>
    </route>
    
    <route>
      <description>Construct or retrieve indexing metadata for a single object</description>
      <from uri="jetty:http://0.0.0.0:8193/getIndexingMetadata"/>
      <removeHeader headerName="CamelHttpUri"/>
      <removeHeader headerName="CamelHttpPath"/>
      <to uri="freemarker:freemarker/atom/listdatastreams.vm"/>
      <inOut uri="nmr:service:repositories:api-a"/>
    <!--
      <choice>
        <when>
          <xpath>//datastreamDef/ID = 'SOLR'</xpath>
          <setHeader headerName="libDatastream">
            <constant>SOLR</constant>
          </setHeader>
          <to uri="freemarker:freemarker/atom/getdatastream.vm"/>
          <inOut uri="nmr:service:repositories:api-a"/>
        </when>
        <otherwise>
          <description>Create indexing metadata from datastreams</description>
          -->
          <to uri="freemarker:freemarker/sparql/getindexabledatastreams.vm"/>
          <inOut uri="nmr:service:repositories:resource-index"/>
          <!-- swap info:fedora/ stuff for dereferencable URLs -->
          <inOut uri="jbi:service:urn:lib:indexing:concretizeURIs"/>
          <inOut uri="jbi:service:urn:lib:indexing:splitRDFDescriptions"/>
          <to uri="log:postsplitdescriptions"/>
          <split parallelProcessing="true" strategyRef="simpleXMLRecursiveMergeStrategy">
            <xpath>/rdf:RDF/rdf:Description</xpath>
            <!-- transform a single metadata stream against its XSLT -->
            <!-- stick stylesheet URL in a header -->
            <setHeader headerName="stylesheetURL">
              <xpath resultType="java.lang.String">/rdf:Description/uva-lib:isIndexedBy/@rdf:resource</xpath>
            </setHeader>
            <!-- replace body with XML datastream -->
            <setHeader headerName="CamelHttpUri">
              <xpath resultType="java.lang.String">/rdf:Description/@rdf:about</xpath>
            </setHeader>
            <setHeader headerName="CamelHttpMethod">
              <constant>GET</constant>
            </setHeader>
            <!-- this url is a dummy: the real URL is in CamelHttpUrl header
              see: http://camel.apache.org/http.html -->
            <to uri="http://www.example.com"/>
            <removeHeader headerName="CamelHttpUri"/>
            <removeHeader headerName="CamelHttpMethod"/>
            <to uri="log:retrieveddatastream"/>
            <!-- and render -->
            <inOut uri="jbi:service:urn:lib:indexing:single-datastream-xslt"/>
          </split>
          <inOut uri="jbi:service:urn:lib:indexing:mergeAndDeduplicateSolr"/>
      <!--
        </otherwise>
      </choice>
      -->
    </route>

  </camelContext>
  
  <osgix:cm-properties id="config" persistent-id="edu.virginia.lib.ole.beverly.indexing">
    <prop key="indexable-cm">info:fedora/indexable:cm</prop>
  </osgix:cm-properties>
  
  <ctx:property-placeholder properties-ref="config" />

  <bean id="simpleXMLRecursiveMergeStrategy" class="edu.virginia.lib.ole.esb.aggregation.SimpleXMLRecursiveMergeStrategy"/>

</beans>
